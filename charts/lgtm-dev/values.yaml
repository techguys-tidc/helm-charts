


# Compatible with Huawei Cloud (CCE)
global:
  dnsNamespace: kube-system
  dnsService: coredns

# Postgresql for Grafana database
postgresql:
  enabled: true
  global:
    ## @param global.imageRegistry Global Docker image registry
    ##
    imageRegistry: ""
    ## @param global.imagePullSecrets Global Docker registry secret names as an array
    ## e.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    ## @param global.defaultStorageClass Global default StorageClass for Persistent Volume(s)
    ## @param global.storageClass DEPRECATED: use global.defaultStorageClass instead
    ##
    defaultStorageClass: ""
    storageClass: ssd
    postgresql:
      ## @param global.postgresql.auth.postgresPassword Password for the "postgres" admin user (overrides `auth.postgresPassword`)
      ## @param global.postgresql.auth.username Name for a custom user to create (overrides `auth.username`)
      ## @param global.postgresql.auth.password Password for the custom user to create (overrides `auth.password`)
      ## @param global.postgresql.auth.database Name for a custom database to create (overrides `auth.database`)
      ## @param global.postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials (overrides `auth.existingSecret`).
      ## @param global.postgresql.auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.adminPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.userPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ## @param global.postgresql.auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials (overrides `auth.secretKeys.replicationPasswordKey`). Only used when `global.postgresql.auth.existingSecret` is set.
      ##
      auth:
        postgresPassword: ""
        username: ""
        password: ""
        database: ""
        existingSecret: ""
        secretKeys:
          adminPasswordKey: ""
          userPasswordKey: ""
          replicationPasswordKey: ""
      ## @param global.postgresql.service.ports.postgresql PostgreSQL service port (overrides `service.ports.postgresql`)
      ##
      service:
        ports:
          postgresql: ""
    ## Compatibility adaptations for Kubernetes platforms
    ##
    compatibility:
      ## Compatibility adaptations for Openshift
      ##
      openshift:
        ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
        ##
        adaptSecurityContext: auto
# Logs
loki:
  enabled: true
  # -- Deployment mode lets you specify how to deploy Loki.
  # There are 3 options:
  # - SingleBinary: Loki is deployed as a single binary, useful for small installs typically without HA, up to a few tens of GB/day.
  # - SimpleScalable: Loki is deployed as 3 targets: read, write, and backend. Useful for medium installs easier to manage than distributed, up to a about 1TB/day.
  # - Distributed: Loki is deployed as individual microservices. The most complicated but most capable, useful for large installs, typically over 1TB/day.
  # There are also 2 additional modes used for migrating between deployment modes:
  # - SingleBinary<->SimpleScalable: Migrate from SingleBinary to SimpleScalable (or vice versa)
  # - SimpleScalable<->Distributed: Migrate from SimpleScalable to Distributed (or vice versa)
  # Note: SimpleScalable and Distributed REQUIRE the use of object storage.
  deploymentMode: SimpleScalable
  # -- Section for configuring optional Helm test
  test:
    enabled: false
  # The Loki canary pushes logs to and queries from this loki installation to test
  # that it's working correctly
  lokiCanary:
    enabled: false
  ######################################################################################################################
  #
  # Base Loki Configs including kubernetes configurations and configurations for Loki itself,
  # see below for more specifics on Loki's configuration.
  #
  ######################################################################################################################
  # -- Configuration for running Loki
  loki:
    ######################################################################################################################
    #
    # Chart Testing
    #
    ######################################################################################################################
    # -- Deploy Loki if enabled. See [upstream readme](https://github.com/grafana/helm-charts/tree/main/charts/loki-distributed#values) for full values reference.
    enabled: true
    auth_enabled: false
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    storage:
      # Loki requires a bucket for chunks and the ruler. GEL requires a third bucket for the admin API.
      # Please provide these values if you are using object storage.
      bucketNames:
        chunks: "loki-chunks-demo"
        ruler: "loki-ruler-demo"
        admin: "loki-admin-demo"
      type: s3
      # Huawei OBS
      s3:
        endpoint: ""
        region: ""
        secretAccessKey: ""
        accessKeyId: ""
        signatureVersion: null
        s3ForcePathStyle: false
        insecure: true
        http_config: {}
        # -- Check https://grafana.com/docs/loki/latest/configure/#s3_storage_config for more info on how to provide a backoff_config
        backoff_config: {}
    tracing:
      enabled: true
    querier:
      # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
      max_concurrent: 4
  backend:
    enabled: true
    replicas: 2
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  read:
    enabled: true
    replicas: 2
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  write:
    enabled: true
    replicas: 2
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 20Gi
  ######################################################################################################################
  #
  # Microservices Mode
  #
  # For large Loki deployments ingesting more than 1 TB/day
  #
  ######################################################################################################################
  ingester:
    enabled: false
    replicas: 0
    persistence:
      enabled: true
      inMemory: false
      claims:
        - name: data
          size: 10Gi
          storageClass: ssd
  distributor:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  querier:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  queryFrontend:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  queryScheduler:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  indexGateway:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  compactor:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  bloomGateway:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  bloomCompactor:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  patternIngester:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  ruler:
    enabled: false
    replicas: 0
    persistence:
      volumeClaimsEnabled: true
      storageClass: ssd
      size: 10Gi
  # -- Configuration for the minio subchart
  minio:
    enabled: false
    replicas: 0

# Dashboard
grafana:
  enabled: true
  replicas: 1
  env:
    GF_DATABASE_PASSWORD: ""
  grafana.ini:
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    analytics:
      check_for_updates: true
    log:
      mode: console
    grafana_net:
      url: https://grafana.net
    server:
      domain: "{{ if (and .Values.ingress.enabled .Values.ingress.hosts) }}{{ .Values.ingress.hosts | first }}{{ else }}''{{ end }}"
    database:
      type: postgres
      host: lgtm-postgresql.lgtm.svc.cluster.local:5432
      name: grafana
      user: grafana
  # -- Grafana data sources config. Connects to all three by default
  datasources:
    datasources.yaml:
      apiVersion: 1
      # -- Datasources linked to the Grafana instance. Override if you disable any components.
      datasources:
        # https://grafana.com/docs/grafana/latest/datasources/loki/#provision-the-loki-data-source
        - name: Loki
          uid: loki
          type: loki
          url: http://{{ .Release.Name }}-loki-gateway
          isDefault: false
        # https://grafana.com/docs/grafana/latest/datasources/prometheus/#provision-the-data-source
        - name: Mimir
          uid: prom
          type: prometheus
          url: http://{{ .Release.Name }}-mimir-nginx/prometheus
          isDefault: true
        # https://grafana.com/docs/grafana/latest/datasources/tempo/configure-tempo-data-source/#provision-the-data-source
        - name: Tempo
          uid: tempo
          type: tempo
          url: http://{{ .Release.Name }}-tempo-query-frontend:3100
          isDefault: false
          jsonData:
            tracesToLogsV2:
              datasourceUid: loki
            lokiSearch:
              datasourceUid: loki
            tracesToMetrics:
              datasourceUid: prom
            serviceMap:
              datasourceUid: prom
  # Provision grafana-dashboards-kubernetes
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'grafana-dashboards-kubernetes'
        orgId: 1
        folder: 'Kubernetes'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
  dashboards:
    grafana-dashboards-kubernetes:
      k8s-system-api-server:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
      k8s-system-coredns:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
      k8s-views-global:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
      k8s-views-namespaces:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
      k8s-views-nodes:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
      k8s-views-pods:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
  ingress:
    enabled: true
    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    ingressClassName: nginx
    # Values can be templated
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    labels: {}
    path: /
    # pathType is only for k8s >= 1.1=
    pathType: Prefix
    hosts:
      - ""
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    tls: []

# Trace  
# Distributed
tempo:
  # -- Deploy Tempo if enabled.  See [upstream readme](https://github.com/grafana/helm-charts/blob/main/charts/tempo-distributed/README.md#values) for full values reference.
  enabled: true
  distributor:
    replicas: 1
  ingester:
    replicas: 1
    config:
      replication_factor: 1
  global_overrides:
    per_tenant_override_config: /runtime-config/overrides.yaml
    defaults:
      metrics_generator:
        processors:
          - service-graphs
          - span-metrics
          - local-blocks
  metricsGenerator:
    enabled: true
    config:
      storage:
        remote_write:
        - url: http://lgtm-mimir-nginx.lgtm.svc/api/v1/push
          send_exemplars: true
  traces:
    jaeger:
      grpc:
        enabled: true
        receiverConfig: {}
      thriftBinary:
        enabled: true
        receiverConfig: {}
      thriftCompact:
        enabled: true
        receiverConfig: {}
      thriftHttp:
        enabled: true
        receiverConfig: {}
    opencensus:
      enabled: true
      receiverConfig: {}
    otlp:
      grpc:
        enabled: true
        receiverConfig: {}
      http:
        enabled: true
        receiverConfig: {}
    zipkin:
      enabled: true
      receiverConfig: {}

# Metric
mimir:
  # -- Deploy Mimir if enabled. See [upstream values.yaml](https://github.com/grafana/mimir/blob/main/operations/helm/charts/mimir-distributed/values.yaml) for full values reference.
  enabled: true
  mimir:
    structuredConfig:
      common:
        storage:
          backend: s3
          s3:
            bucket_name: ""
            endpoint: ""
            access_key_id: "" # This is a secret injected via an environment variable
            secret_access_key: "" # This is a secret injected via an environment variable
            http:
              insecure_skip_verify: true
  prometheusRule:
    enabled: true
    mimirRules: true
    mimirAlerts: true
  alertmanager:
    enabled: false
    persistentVolume:
      enabled: true
      storageClass: ssd
      size: 20Gi
  compactor:
    enabled: true
    persistentVolume:
      enabled: true
      storageClass: ssd
      size: 20Gi
  distributor:
    replicas: 3
  ingester:
    enabled: true
    replicas: 2
    zoneAwareReplication:
      enabled: false
    persistentVolume:
      enabled: true
      storageClass: ssd
      size: 20Gi
  store_gateway:
    enabled: true
    zoneAwareReplication:
      enabled: false
    persistentVolume:
      enabled: true
      storageClass: ssd
      size: 20Gi
  ruler:
    enabled: false
  minio:
    enabled: false
  runtimeConfig:
    distributor_limits:
      max_inflight_push_requests: 30000
      max_inflight_push_requests_bytes: 50000000
      max_ingestion_rate: 20000
    ingester_limits:
      max_inflight_push_requests: 30000
      max_ingestion_rate: 20000
      max_series: 1500000
      max_tenants: 1000